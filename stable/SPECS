IMPORTANT: THIS SPECS FILE IS OBSOLETE, SINCE PHOEBE DEVELOPMENT IS MOVED
           TO ANOTHER BRANCH SINCE VERSION 0.30. VERSIONS DEPENDING ON
           GTK1.2 AND SUPERMONGO WILL UNDERGO ONLY AND EXCLUSIVELY CRITI-
           CAL BUGFIXES, NO NEW FEATURES WILL BE ADDED. IF YOU WANT TO
           CONTRIBUTE, PLEASE READ THE SPECS FILE IN THE TOPLEVEL PHOEBE
           VERSION 0.30 OR LATER.

-------------------------------------------------------------------------

Hi, guys! Interested in developing PHOEBE? I prepared a list of standards
and suggestions for your comfort while developing PHOEBE.


                /-------------------------------------------\
                | P R O G R A M M I N G   S T A N D A R D S |  
                \-------------------------------------------/

- All PHOEBE windows (parent, childs, dialogs, pop-ups) are defined
  globally. Their definitions go to phoebe_global.h. I am aware this
  isn't the usual practice, but it forces us to be consistent and careful
  about naming conventions.

- All PHOEBE configuration options (values and switches) are defined
  globally. Their definitions go to phoebe_global.h. All these options
  should be in configuration file for a given PHOEBE session.

- GTK readout string pointers should all be readout_str. Internal string
  pointers should be named working_str and they should point to the sta-
  tically declared char working_string[255].

- All string arguments are to be passed as pointers, not arrays, i.e.

    void some_function (char *arg);    <-- the right way
		void some_function (char arg[]);

- All comments follow the same shape: the beginning of a comment /* goes
  to the same level as the object that is commented and the ending of a
  comment */, no matter how long, is placed in the last two visible pla-
  ces, meaning 78. and 79. place.

- All PHOEBE sources (except main.c) must have the following form:

    phoebe_*.c                    for calculation routines,
    phoebe_gui_*.c                for GUI related routines,

  where * denotes the segment of code the particular source contains. In
  example, in we want to create SM scripts for plotting, it belongs to
  phoebe_plot.c; if, on the other hand, we want to make a function to put
  the plot on screen through GTK+, it belongs to phoebe_gui_plot.c.

- All widget readouts, no matter how stable and unlikely to change in
  future, go to phoebe_allocations.c. *NEVER* read out any widget in
  plotting routines or alike, because it is extremely difficult to in-
  corporate changes to widgets if readouts are all over the place.

- CList-based functions with generic form:

    add_filters_to_*_filter_list    -> insert filters to * combo boxes
    add_empty_record_to_*_list      -> insert empty records to CLists

  go to phoebe_gui_accessories.c, phoebe_gui_accessories.h.

- All widgets must follow the same naming convention:

    [parent widget name]_[widget_function]_[widget_type]

  In example: if a spin-button is placed in PHOEBE_assign_el3 parent wid-
  get and it reads out third light value, its name will be:

    assign_el3_el3_value

  "assign_el3" is the parent widget name, "el3" is the widget function
  and "value" is the widget type. The following widget types are allowed:

    buttons:            button
    toggle buttons:     switch
    spin_buttons:       value
    entries:            entry
    labels:             label
    tab labels:         tab_label
    combo boxes:        list
    combo box entries:  list_entry
    columned lists:     info_list
    scrolled windows:   info_list_box

- All callbacks have generic names:

    buttons:            on_*_clicked
    toggle-buttons:     on_*_toggled
    spin-buttons:       on_*_changed
    menus:              on_*_activated
    columned lists:     on_*_double_clicked

  They all go to phoebe_gui_callbacks.c, phoebe_gui_callbacks.h.

- All GLADE/GTK+ related work-arounds and accessories go to
  phoebe_gui_accessories.c.

- Memory allocations for array/table/container variables must be done by
  calling wrapper functions phoebe_malloc and phoebe_realloc. These func-
  tions must be called from allocation functions residing in
  phoebe_allocations.c. They must be freed in the same function they are
  declared in, although they may be allocated somewhere else.

- Adding PHOEBE keywords is done by:
  1) adding a keyword to phoebe_global.h
	2) adding a keyword to phoebe_gui_accessories.c to the following
     routines:
     a) phoebe_widget
     b) get_phoebe_keyword_from_keyword_name
     c) phoebe_common_name

- Adding scripter commands is done by:
  1) adding an entry to phoebe_gui_accessories.c to routine
     define_scripter_commands
	2) adding an action to phoebe_scripting.c
	3) adding a callback to phoebe_gui_callbacks.c to routine
     on_scripter_execute_script_button_clicked


                          /-----------------------\
                          | S U G G E S T I O N S |
                          \-----------------------/

- Set the editor width to 80 characters.

- Set the TABulator width to 2 spaces in your favorite editor. Only that
  way you'll be able to see the code cleanly.

